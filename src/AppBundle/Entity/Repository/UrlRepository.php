<?php

namespace AppBundle\Entity\Repository;

use AppBundle\Entity\Url;
use AppBundle\Exception\NonexistentHashException;
use AppBundle\Exception\NonexistentUrlException;
use Doctrine\ORM\EntityRepository;

/**
 * UrlRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UrlRepository extends EntityRepository
{
    /**
     * Find the Url by its url.
     *
     * @param string $url
     *
     * @return Url|null the entity instance or NULL if the entity can not be found
     */
    public function findOneByUrl(string $url)
    {
        $url = trim($url);

        /** @var Url $url */
        $url = $this->findOneBy(['url' =>$url]);

        return $url;
    }

    /**
     * Get the Url by its url or throws an exception.
     *
     * @param string $url
     *
     * @throws NonexistentUrlException
     *
     * @return Url
     */
    public function getOneByUrl(string $url)
    {
        $url = $this->findOneByUrl($url);

        if (!$url) {
            throw new NonexistentUrlException();
        }

        return $url;
    }

    /**
     * Find the Url by its hash.
     *
     * @param string $hash
     *
     * @return Url|null the entity instance or NULL if the entity can not be found
     */
    public function findOneByHash(string $hash)
    {
        $hash = trim($hash);
        /** @var Url $url */
        $url = $this->findOneBy(['hash' => $hash]);

        return $url;
    }

    /**
     * Get the Url by its hash or throws an exception.
     *
     * @param string $hash
     *
     * @throws NonexistentHashException
     *
     * @return Url
     */
    public function getOneByHash(string $hash)
    {
        $url = $this->findOneByHash($hash);

        if (!$url) {
            throw new NonexistentHashException();
        }

        return $url;
    }
}
